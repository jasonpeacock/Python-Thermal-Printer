#!/usr/bin/env python3

# Main script for Adafruit Internet of Things Printer 2.  Monitors button
# for taps and holds, performs periodic actions (Twitter polling by default)
# and daily actions (Sudoku and weather by default).
#
# Written by Adafruit Industries.  MIT license.
#
# MUST BE RUN AS ROOT (due to GPIO access)
#
# Required software includes Adafruit_Thermal, Python Imaging, and PySerial
# libraries. Other libraries used are part of stock Python install.
#
# Resources:
# http://www.adafruit.com/products/597 Mini Thermal Receipt Printer
# http://www.adafruit.com/products/600 Printer starter pack
import argparse
import configparser
import subprocess
import sys

import Adafruit_Thermal
import console_printer
import iot_printer
import twitter_statuses

parser = argparse.ArgumentParser(description="Run the IOT printer.")
parser.add_argument(
    "--console", action="store_true", help="Print the console instead of the printer."
)
parser.add_argument("-c", "--config-file", required=True, help="The configuration `.ini` file.")
parser.add_argument("-v", "--verbose", action="store_true", help="Enable verbose DEBUG logging.")
args = parser.parse_args()

log_level = logging.INFO
if args.verbose:
    log_level = logging.DEBUG

logging.basicConfig(format="[%(levelname)s]\t(%(name)s)\t%(message)s", level=log_level)

log = logging.getLogger(__name__)

# Processor load is heavy at startup; wait a moment to avoid
# stalling during greeting.
time.sleep(30)

if args.console:
    printer = console_printer.ConsolePrinter()
else:
    printer = Adafruit_Thermal(serial_device, baud_rate, timeout=timeout_seconds)

twitter = TwitterStatuses(
    consumer_key=args.consumer_key,
    consumer_secret=args.consumer_secret,
    query_string=args.query_string,
    printer=printer,
)

iot_printer = IotPrinter(printer=printer, twitter=twitter)
sys.exit(0)
