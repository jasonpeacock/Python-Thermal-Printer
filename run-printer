#!/usr/bin/env python3

# Main script for Adafruit Internet of Things Printer 2. Monitors button
# for taps and holds, performs periodic actions and daily actions.
#
# MUST BE RUN AS ROOT (due to GPIO access)
#
# Resources:
# http://www.adafruit.com/products/597 Mini Thermal Receipt Printer
# http://www.adafruit.com/products/600 Printer starter pack
import argparse
import configparser
import logging
import os
import sys
import time

from hardware import Hardware, FakeHardware
from iot_printer import IotPrinter, PrinterNetworkError
from task_manager import TaskManager

SECTION_PRINTER = "printer"
SECTION_DAILY_TASKS = "daily_tasks"
SECTION_HOLD_TASKS = "hold_tasks"
SECTION_INTERVAL_TASKS = "interval_tasks"
SECTION_TAP_TASKS = "tap_tasks"

#
# MAIN
#

# Parse the commandline arguments.
parser = argparse.ArgumentParser(description="Run the IoT printer.")
parser.add_argument(
    "--console", action="store_true", help="Print to the console instead of the printer."
)
parser.add_argument("-c", "--config-file", required=True, help="The configuration `.ini` file.")
parser.add_argument("-v", "--verbose", action="store_true", help="Enable verbose DEBUG logging.")
args = parser.parse_args()

# Setup logging.
log_level = logging.INFO
if args.verbose:
    log_level = logging.DEBUG

logging.basicConfig(format="[%(levelname)s]\t(%(name)s)\t%(message)s", level=log_level)

log = logging.getLogger(__name__)

# Read the configuration file.
if not os.path.isfile(args.config_file):
    log.fatal("Config file [%s] is not readable", args.config_file)
    sys.exit(1)

config = configparser.ConfigParser(allow_no_value=True)
config.read(args.config_file)

# Configure the Printer.
if args.console:
    import console_printer

    printer = console_printer.ConsolePrinter()
    hardware = FakeHardware()
else:
    import Adafruit_Thermal

    # Processor load is heavy at startup; wait a moment to avoid stalling during greeting.
    startup_delay_seconds = config[SECTION_PRINTER].getint("startup_delay_seconds", 30)
    log.info("Waiting [%s] seconds after startup before running", startup_delay_seconds)
    time.sleep(startup_delay_seconds)

    serial_device = config[SECTION_PRINTER].get("serial_device", "/dev/serial0")
    baud_rate = config[SECTION_PRINTER].getint("baud_rate", 19200)
    timeout_seconds = config[SECTION_PRINTER].getint("timeout_seconds", 5)
    printer = Adafruit_Thermal.Adafruit_Thermal(
        serial_device, baud_rate, timeout=timeout_seconds
    )

    hardware = Hardware()

iot_printer = IotPrinter(printer=printer, hardware=hardware)

try:
    iot_printer.setup()
except PrinterNetworkError as e:
    # The network check fails when run from the console, ignore it.
    if not args.console:
        raise e

# Load the tasks from the configuration.
task_manager = TaskManager()
task_manager.load_daily_tasks(config=config, section=SECTION_DAILY_TASKS, printer=printer)
task_manager.load_hold_tasks(config=config, section=SECTION_HOLD_TASKS, printer=printer)
task_manager.load_interval_tasks(config=config, section=SECTION_INTERVAL_TASKS, printer=printer)
task_manager.load_tap_tasks(config=config, section=SECTION_TAP_TASKS, printer=printer)

# Configure the IoT printer with the task runners.
iot_printer.register_tasks_runners(
    run_daily_tasks=task_manager.run_daily_tasks,
    run_hold_tasks=task_manager.run_hold_tasks,
    run_interval_tasks=task_manager.run_interval_tasks,
    run_tap_tasks=task_manager.run_tap_tasks,
)

# Run the printer, forever.
iot_printer.run()

sys.exit(0)
